---

- name: detect boot firmware (UEFI or BIOS)
  shell: '[ -d /sys/firmware/efi ] && echo UEFI || echo BIOS'
  register: firmware

- name: create /boot/efi directory
  file:
    path: /boot/efi
    state: directory
  when: firmware.stdout == 'UEFI'

- name: find out EFI partition number
  shell: "file /dev/disk/by-partlabel/efi | grep -o '.$'"
  register: efi_partition_number
  when: firmware.stdout == "UEFI"

- name: detect UUID of encrypted device
  command: blkid -s PARTUUID -o value /dev/disk/by-partlabel/{{ encrypt_partition }}
  register: cryptdevice_uuid

- name: install grub
  pacman:
    name: grub
    state: present
    update_cache: true
  with_items:
    - grub
    - efibootmgr

- name: install EFI boot manager
  pacman:
    name: efibootmgr
    state: present
    update_cache: true
  when: firmware.stdout == "UEFI"

- name: configure encrypted device for GRUB
  lineinfile: 
    dest: /etc/default/grub
    regexp: ^GRUB_CMDLINE_LINUX= 
    line: GRUB_CMDLINE_LINUX="cryptdevice=PARTUUID={{ cryptdevice_uuid.stdout }}:arch"
  when: encrypt_partition is defined

- name: configure initramfs build hooks
  lineinfile: 
    dest: /etc/mkinitcpio.conf
    regexp: ^HOOKS=
    line: HOOKS="{{ initramfs_hooks | join(" ") }}"

- name: rebuild initramfs
  command: mkinitcpio -p linux

- name: install Grub bootloader for UEFI
  command: grub-install --recheck
  when: firmware.stdout == "UEFI"

- name: install Grub bootloader for BIOS
  command: grub-install --recheck {{ disk.device }}
  when: firmware.stdout == "BIOS"

- name: create Grub config
  command: grub-mkconfig -o /boot/grub/grub.cfg

- name: create UEFI boot entry
  command: efibootmgr --create --disk {{ disk.device }} --part {{ efi_partition_number.stdout }} --loader /EFI/arch/grubx64.efi --label "Arch Linux"
  when: firmware.stdout == "UEFI"
  ignore_errors: yes

- name: write EFI entry for VirtualBox
  lineinfile:
    dest: /boot/efi/startup.nsh
    line: "EFI\\arch\\grubx64.efi"
    create: true
  when: ansible_product_name == "VirtualBox" and firmware.stdout == "UEFI"
