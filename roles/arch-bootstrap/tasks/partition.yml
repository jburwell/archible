---

- name: remove existing LVM volume group
  command: vgremove -f {{ lvm.group }}
  ignore_errors: yes

- name: clean up existing LVM records
  command: dmsetup remove_all

- name: create partition table on disks
  partition: 
    dev: "{{ disk.device }}"
    table: "{{ disk.table }}"
    force: true

- name: create disk partitions
  partition:
    dev: "{{ disk.device }}"
    name: "{{ item.name }}"
    start: "{{ item.start }}"
    end: "{{ item.end }}"
    type: "{{ item.type }}"
    flags: "{{ item.flags|default(omit) }}"
    fstype: "{{ item.fstype|default(omit) }}"
  with_items:
    - "{{ disk.partitions }}"

- name: encrypt device
  expect:
    command: "cryptsetup -q luksFormat /dev/disk/by-partlabel/{{ encrypt_partition }}"
    responses:
      (?i)passphrase: "{{ hostvars.localhost.luks_passphrase }}"

- name: open encrypted device
  expect:
    command: cryptsetup luksOpen /dev/disk/by-partlabel/{{ encrypt_partition }} {{ lvm.group }}
    responses:
      (?i)passphrase: "{{ hostvars.localhost.luks_passphrase }}"

- name: create LVM physical volumes and groups
  lvg:
    pvs: "/dev/mapper/{{ item.lvm_group }}"
    vg: "{{ item.lvm_group }}"
  with_items: "{{ disk.partitions }}"
  when: item.lvm_group is defined

- name: create LVM logical volumes
  lvol: 
    vg: "{{ lvm.group }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
  with_items: "{{ lvm.volumes }}"

- name: create filesystems on LVM volumes
  partition: 
    dev: "/dev/{{ lvm.group }}/{{ item.name }}" 
    fstype: "{{ item.fstype }}" 
    force: true
  with_items: "{{ lvm.volumes }}"

- name: create swap
  command: "mkswap /dev/{{ lvm.group }}/{{ item.name }}"
  with_items: "{{ lvm.volumes }}"
  when: item.fstype == "linux-swap"

- name: enable swap
  command: "swapon /dev/{{ lvm.group }}/{{ item.name }}"
  with_items: "{{ lvm.volumes }}"
  when: item.fstype == "linux-swap"
